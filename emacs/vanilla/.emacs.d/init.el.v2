;;
;; My epic EMACS init file :)
;;

;;; Code:

(setq gc-cons-threshold (* 128 1024 1024)
      read-process-output-max (* 1024 1024)
      make-backup-files nil
      create-lockfiles nil)

(add-hook 'emacs-startup-hook
	  #'(lambda ()
	      (message "Startup in %s seconds with %d garbage collection"
		       (emacs-init-time "%.2f")
		       gcs-done)))

(require 'server)
(unless (server-running-p)
  (server-start))

(setq-default shell-file-name "/bin/bash")
(setq backup-directory-alist            '((".*" . "~/.Trash")))
(setq custom-file "~/.emacs.d/emacs-custom.el")
(load custom-file t)

(defmacro prot-emacs-keybind (keymap &rest definitions)
  "Expand key binding DEFINITIONS for the given KEYMAP.
DEFINITIONS is a sequence of string and command pairs."
  (declare (indent 1))
  (unless (zerop (% (length definitions) 2))
    (error "Uneven number of key+command pairs"))
  (let ((keys (seq-filter #'stringp definitions))
        ;; We do accept nil as a definition: it unsets the given key.
        (commands (seq-remove #'stringp definitions)))
    `(when-let (((keymapp ,keymap))
                (map ,keymap))
       ,@(mapcar
          (lambda (pair)
            (let* ((key (car pair))
                   (command (cdr pair)))
              (unless (and (null key) (null command))
                `(define-key map (kbd ,key) ,command))))
          (cl-mapcar #'cons keys commands)))))

;; Sample of `prot-emacs-keybind'
;; (prot-emacs-keybind global-map
;;   "C-z" nil
;;   "C-x b" #'switch-to-buffer
;;   "C-x C-c" nil
;;   "C-x k" #'kill-buffer)


;;
;; straight package manager
(defvar bootstrap-version)
(let ((bootstrap-file
      (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
        "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
        'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)
(setq straight-use-package-by-default t)

;;
;; DASHBOARD
(use-package dashboard
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Emacs Is ... Everything ??!!!!")
  (setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  ;; (setq dashboard-startup-banner "~/.config/emacs/images/dtmacs-logo.png")  ;; use custom image as banner
  (setq dashboard-center-content t) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 5)
                          (agenda . 5 )
                          (bookmarks . 3)
                          (projects . 3)
                          (registers . 3)))
  :custom 
  (dashboard-modify-heading-icons '((recents . "file-text")
				    (bookmarks . "book")))
  :config
  (dashboard-setup-startup-hook))

;;
;; which-key
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-separator "  ")
  (setq which-key-prefix-prefix "... ")
  (setq which-key-max-display-columns 3)
  
  (setq which-key-idle-secondary-delay 0.25)
  (setq which-key-add-column-padding 1)
  (setq which-key-max-description-length 40)
  
  (setq which-key-idle-delay 0.3)
  (setq which-key-popup-type 'side-window)

  ;; location of which-key window. valid values: top, bottom, left, right,
  ;; or a list of any of the two. If it's a list, which-key will always try
  ;; the first location first. It will go to the second location if there is
  ;; not enough room to display any keys in the first location
  (setq which-key-side-window-location 'bottom)

  ;; max width of which-key window, when displayed at left or right.
  ;; valid values: number of columns (integer), or percentage out of current
  ;; frame's width (float larger than 0 and smaller than 1)
  (setq which-key-side-window-max-width 0.33)

  ;; max height of which-key window, when displayed at top or bottom.
  ;; valid values: number of lines (integer), or percentage out of current
  ;; frame's height (float larger than 0 and smaller than 1)
  (setq which-key-side-window-max-height 0.25))


;;
;; Configuration
;; start every frame maximized
(add-to-list 'default-frame-alist '(fullscreen . fullboth))
;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

;;; yasnippet
(use-package yasnippet
  :ensure
  :config
  (yas-reload-all)
  (yas-global-mode 1)
  (add-hook 'prog-mode-hook 'yas-minor-mode)
  (add-hook 'text-mode-hook 'yas-minor-mode))

;;; markdown mode
(use-package markdown-mode
  :mode (("README\\.md\\'" . gfm-mode)
	 ("\\.md\\'" . markdown-mode)
	 ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "pandoc"))

;;
;; LSP bridge
(use-package lsp-bridge
  :straight '(lsp-bridge :type git :host github :repo "manateelazycat/lsp-bridge"
            :files (:defaults "*.el" "*.py" "acm" "core" "langserver" "multiserver" "resources")
            :build (:not compile))
  :init
  (global-lsp-bridge-mode))


;;
;; DOOM modeline
(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :config
  (setq doom-modeline-height 35      ;; sets modeline height
        doom-modeline-bar-width 5    ;; sets right bar width
        doom-modeline-persp-name t   ;; adds perspective name to modeline
        doom-modeline-persp-icon t)) ;; adds folder icon next to persp name

;;
;; better help
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))


;;
;; Ripgrep
;; https://www.youtube.com/watch?v=4qLD4oHOrlc
(use-package rg
  :config
  (setq rg-group-result t)
  (setq rg-hide-command t)
  (setq rg-show-columns t)
  (setq rg-ignore-case nil)
  (setq rg-show-header t)
  (setq rg-custom-type-aliases nil)
  (setq rg-default-alias-fallback "all")

  (rg-define-search adi/grep-project-or-current-dir
    "Execute ripgrep in the project root/current directory"
	:query ask
	:format regexp
	:files "everything"
	:dir (let ((vc (vc-root-dir)))
		   (if vc
			   vc
			 default-directory))
	:confirm prefix
	:flags ("--hidden -g !.git"))

  :bind (("M-s g" . adi/grep-project-or-current-dir)
		 :map rg-mode-map
		 ("C-n" . next-line)
		 ("C-p" . previous-line)
		 ("M-n" . rg-next-file)
		 ("M-p" . rg-prev-file)))

(use-package emacs
  :config
  (defvar adi/window-configuration nil
	"Current window configuration")

  (define-minor-mode adi/window-single-toggle
	"Toggle between multiple windows and single window"
	:lighter " [M]"
	:global nil
	(if (one-window-p)
		(when adi/window-configuration
		  (set-window-configuration adi/window-configuration))
	  (setq adi/window-configuration (current-window-configuration))
	  (delete-other-windows)))

  (defun adi/kill-buffer-current (&optional arg)
	"Kill current buffer or abort recursion when in minibuffer."
	(interactive "P")
	(if (minibufferp)
		(abort-recursive-edit)
	  (kill-buffer (current-buffer)))
	(when (and arg
			   (not (one-window-p)))
	  (delete-window)))

  :bind (("s-m" . adi/window-single-toggle)
		 ("s-k" . adi/kill-buffer-current)))  


;;; Directional window motions (windmove)
;; (setq windmove-create-window nil)     ; Emacs 27.1
(global-set-key (kbd "C-M-<up>") #'windmove-up)
(global-set-key (kbd "C-M-<right>") #'windmove-right)
(global-set-key (kbd "C-M-<down>") #'windmove-down)
(global-set-key (kbd "C-M-<left>") #'windmove-left)
(global-set-key (kbd "C-M-S-<up>") #'windmove-swap-states-up)
(global-set-key (kbd "C-M-S-<right>") #'windmove-swap-states-right)
(global-set-key (kbd "C-M-S-<down>") #'windmove-swap-states-down)
(global-set-key (kbd "C-M-S-<left>") #'windmove-swap-states-left)



;;
;; Look & feel
(use-package modus-themes)
;; (load-theme 'gruber-darker t)
;; (load-theme 'doom-one t)
;; (load-theme 'zenburn t)
(load-theme 'modus-vivendi-tinted t)

(use-package all-the-icons)
(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))

;;
;; icons
(use-package no-littering)
(use-package nerd-icons
  :custom
  (nerd-icons-font-family "Symbols Nerd Font Mono"))

(use-package nerd-icons-ibuffer
  :hook (ibuffer-mode . nerd-icons-ibuffer-mode)
  :config
  ;; Use human readable file size in ibuffer.
  (setq  nerd-icons-ibuffer-human-readable-size t))

;;
;; Nice flat modeline
;; https://www.youtube.com/watch?v=E1u6DcHis9M
(defvar mode-line-height 1
  "Modeline height.")

(defun flat-style (theme &rest args)
  (custom-set-faces
   `(mode-line
	 ((t (:inherit mode-line
				   :box (:line-width, mode-line-height :style flat-button)))) t)
   `(mode-line-inactive
	 ((t (:inherit mode-line-inactive
				   :box (:line-width, mode-line-height :style flat-button)))) t)
   ))
(advice-add 'load-theme :after #'flat-style)

(setq-default fill-column 80)
(setq column-number-mode t)
(setq tab-width 4)

(recentf-mode 1)
(setq recentf-max-saved-items 100
      inhibit-startup-message t
      ring-bell-function 'ignore)

(tool-bar-mode -1)
(menu-bar-mode -1)
(when (fboundp 'scroll-bar-mode)
  (scroll-bar-mode -1))

;; (global-hl-line-mode 1)
(global-visual-line-mode 1)
;; (global-display-line-numbers-mode 1)
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
(add-hook 'prog-mode-hook 'hl-line-mode)

(setq scroll-step 1
	  scroll-conservatively 10000
	  mouse-wheel-progressive-speed 1
	  mouse-wheel-scroll-amount '(1 ((shift) . 1)))

(set-face-attribute 'default nil :font "Iosevka Nerd Font" :weight 'regular :height 160)
(set-face-attribute 'fixed-pitch nil :font "Iosevka NFM" :weight 'light :height 160)
(set-face-attribute 'variable-pitch nil :font "Iosevka NFM" :weight 'light :height 160)
(global-set-key (kbd "C-x k") 'adi/kill-buffer-current)
(tooltip-mode nil)


(provide 'init)
;;; init.el ends here
